//
//  MovieDetailsModels.swift
//  MyMovies
//
//  Created by Hazem on 6/7/19.
//  Copyright (c) 2019 Hazem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ObjectMapper

// MARK: Use cases
struct Gener :Mappable{
    
    
    var id:Int?
    var name:String?
    
    init(_ id:Int? , _ name:String?) {
        self.id = id
        self.name = name
    }
    
    init?(map: Map) {
        
    }
    
    mutating func mapping(map: Map) {
        id              <- map["id"]
        name           <- map["name"]
    }
}
struct MovieInformation :Mappable{
    
    
    var id :Int? = -1
    var title:String? = ""
    var overView:String? = ""
    var voteCount:Double? = 0
    var posterPath:String? = ""
    var backdropPath:String? = ""
    var movieRate:Double? = 0.0
    var runTime:Int? = 0
    var geners:[Gener] = [Gener]()
    
    init?(map: Map) {
        
    }
    
    mutating func mapping(map: Map) {
        id              <- map["id"]
        title           <- map["title"]
        posterPath      <- map["poster_path"]
        backdropPath    <- map["backdrop_path"]
        movieRate       <- map["vote_average"]
        overView       <- map["overview"]
        runTime       <- map["runtime"]
        voteCount       <- map["vote_count"]
        geners       <- map["geners"]
    }
    
}

struct MovieDetailsViewModel{
    var movieDetails:LocalMovieDetails
    
    var isFavorite :Bool {
        get {
            return movieDetails.isFavorite
        }
    }
    init(_ movieDetails:LocalMovieDetails) {
        self.movieDetails = movieDetails
    }
    
    var movieTitle:String {
        get {
            return movieDetails.title ?? ""
        }
    }
    
    var movieOverView:String {
        get {
            return movieDetails.overView ?? ""
        }
    }
    
    var movieReviewers :String {
        get {
            return "\(String(describing:movieDetails.voteCount))"
        }
    }
    var postUrl:URL? {
        get {
            return URL(string: movieDetails.backdropImage! )
        }
    }
    var rate:String {
        get {
            return "\(String(describing:movieDetails.movieRate))/\(10)"
        }
    }
    var runtimeAndGeners: String {
        var title = ""
        
        for (index,gener) in movieDetails.geners!.enumerated() {
            title.append(contentsOf: (gener as AnyObject).name!)
            if index < (movieDetails.geners?.count)! {
                title.append(contentsOf: " | ")
            }
        }
        print(title)
        return "\(movieDetails.runtime) min" + title
        
    }
}
