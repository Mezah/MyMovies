//
//  MovieDetailsWorker.swift
//  MyMovies
//
//  Created by Hazem on 6/7/19.
//  Copyright (c) 2019 Hazem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import TMDBSwift
import CoreData

class MovieDetailsWorker{
    
    private var dataController = DataController.shared
    private let apiConfig = ApiConfiguration.shared
    
    
    func addMovieToFavortie(_ movieId:Int,_ isFavorite:Bool,completion: @escaping (_ added:Bool) -> ()) {
        
        let fetchReq : NSFetchRequest<LocalMovieDetails> = LocalMovieDetails.fetchRequest()
        let predicate = NSPredicate(format: "id == %@", String(movieId))
        fetchReq.predicate = predicate
        
        if let movieDetails = try? dataController.viewContext.fetch(fetchReq) {
            if movieDetails.count > 0 {
                
                movieDetails[0].isFavorite = !isFavorite
                try? self.dataController.viewContext.save()
                completion(movieDetails[0].isFavorite)
            }
            
        }
    }
    
    func loadMovieDetails(_ movieId:Int,_ completion : @escaping (_ details:LocalMovieDetails?,_ error :Bool,_ noConnection: Bool) ->())
    {
        // fetch data locally first if not found call api
        let fetchReq : NSFetchRequest<LocalMovieDetails> = LocalMovieDetails.fetchRequest()
        let detailsPredicate = NSPredicate(format: "id == %@", String(movieId))
        fetchReq.predicate = detailsPredicate
        //        fetchReq.fetchLimit = 1
        
        let movieFetchRequest :NSFetchRequest<LocalMovie> = LocalMovie.fetchRequest()
        let predicate = NSPredicate(format: "id == %@", String(movieId))
        movieFetchRequest.predicate = predicate
        
        if let movieDetails = try? dataController.viewContext.fetch(fetchReq) {
            if movieDetails.count > 0 {
                completion(movieDetails[0],false,
                           false)
                return
            }
        }
        
        if Connectivity.isConnectedToInternet() {
            NetworkClient.shared.fetchMovieDetails(movieID:String(movieId))
                .responseString { response in
                    let statusCode = response.response?.statusCode
                    
                    if statusCode == 200 {
                        if let jsonString = response.result.value {
                            let movieDetails = MovieInformation(JSONString:jsonString)
                            let localMovieDetails = LocalMovieDetails(context: self.dataController.viewContext)
                            
                            if let appMovieDetails = movieDetails {
                                localMovieDetails.id = String(describing: appMovieDetails.id!)
                                localMovieDetails.isFavorite = false
                                if let posterUrl = appMovieDetails.posterPath {
                                    localMovieDetails.posterImage = String(self.apiConfig.baseUrl + self.apiConfig.posterSize() + posterUrl)
                                }
                                if let backdropPath = appMovieDetails.backdropPath {
                                    localMovieDetails.backdropImage = String(self.apiConfig.baseUrl + self.apiConfig.posterSize() + backdropPath)
                                }
                                localMovieDetails.runtime = String(describing: appMovieDetails.runTime)
                                localMovieDetails.overView = appMovieDetails.overView
                                localMovieDetails.voteCount = appMovieDetails.voteCount ?? 0.0
                                localMovieDetails.title = appMovieDetails.title
                                localMovieDetails.movieRate = appMovieDetails.movieRate ?? 0.0
                                
                                for gener in appMovieDetails.geners {
                                    let movieGener = MovieGener(context: self.dataController.viewContext)
                                    movieGener.id = String(describing: gener.id)
                                    movieGener.name = gener.name
                                    movieGener.movie = localMovieDetails
                                    //                            try? self.dataController.viewContext.save()
                                    localMovieDetails.addToGeners(movieGener)
                                }
                                if let lm = try? self.dataController.viewContext.fetch(movieFetchRequest) {
                                    if lm.count > 0 {
                                        localMovieDetails.localMovie = lm[0]
                                        lm[0].detail = localMovieDetails
                                    }
                                }
                            }
                            try? self.dataController.viewContext.save()
                            completion(localMovieDetails,false,false)
                        }
                    }
                    else if statusCode == 401 || statusCode == 404 {
                        completion(nil,true,false)
                    }
            }
        } else {
            completion(nil,false,true)
        }
        
        
    }
    
    
}
