//
//  DiscoverViewController.swift
//  MyMovies
//
//  Created by Hazem on 6/4/19.
//  Copyright (c) 2019 Hazem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol DiscoverDisplayLogic: class
{
    func displayMovies(viewModel: Discover.DiscoverMovies.ViewModel)
    func displayNoInternet()
    func displayLoading(_ show:Bool)
}

class DiscoverViewController: UIViewController,UICollectionViewDelegate,UICollectionViewDataSource, DiscoverDisplayLogic{
    
    
    @IBOutlet weak var moviesCollection: UICollectionView!
    @IBOutlet weak var progressIndicator: UIActivityIndicatorView!
    
    private var moviesList : [Discover.DiscoverMovies.Movie] = [Discover.DiscoverMovies.Movie]()
    var interactor: DiscoverBusinessLogic?
    var router: (NSObjectProtocol & DiscoverRoutingLogic & DiscoverDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DiscoverInteractor()
        let presenter = DiscoverPresenter()
        let router = DiscoverRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        
        interactor.presenter = presenter
        presenter.viewController = viewController
        
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        loadMovies()
    }
    
    // MARK: Load Movies
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func loadMovies()
    {
        interactor?.loadPopularMovies()
    }
    
    func displayMovies(viewModel: Discover.DiscoverMovies.ViewModel)
    {
        self.moviesList = viewModel.moviesList!
        self.moviesCollection.reloadData()
    }
    
    func displayNoInternet() {
        // show No Internet messege logic
    }
    
    func displayLoading(_ show: Bool) {
        
        progressIndicator.isHidden = !show
        
    }
    
    // MARK: CollectionViewController protocol
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return moviesList.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "discoverCell", for: indexPath) as! DiscoverCell
        let movie = moviesList[(indexPath as NSIndexPath).row]
        cell.moviePoster.kf.indicatorType = .activity
        let posterUrl = URL(string: movie.posterPath!)
        cell.moviePoster.kf.setImage(with: posterUrl)
        cell.movieTitle.text = String(movie.title!)
        return cell
    }
}
