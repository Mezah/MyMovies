//
//  DiscoverWorker.swift
//  MyMovies
//
//  Created by Hazem on 6/4/19.
//  Copyright (c) 2019 Hazem. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import TMDBSwift
import CoreData

class DiscoverWorker {
    private let dataController = DataController.shared
    
    
    func fetchMoviesWith(){
        NetworkClient.shared.fetchPopularMovies()
    }
    
    func fetchMoviesWith(_ request: Discover.DiscoverMovies.Request,_ results:DiscoverResponse)  {
        
        // fetch data locally first if not found call api
        let fetchReq : NSFetchRequest<LocalMovie> = LocalMovie.fetchRequest()
        if let movieResults = try? dataController.viewContext.fetch(fetchReq){
            if movieResults.isEmpty {
                
                if !Connectivity.isConnectedToInternet() {
                    results.noInternet()
                    
                } else {
                    NetworkClient.shared.fetchPopularMovies().responseString {response in
                        let statusCode = response.response?.statusCode
                        
                        if statusCode == 200 {
                            // response success
                            if let jsonString = response.result.value {
                                let disocverResponse = DiscoveMoviesResponse(JSONString: jsonString)
                                var localMovies = [LocalMovie]()
                                if let apiMoviesList = disocverResponse?.result {
                                    
                                    for movie in apiMoviesList {
                                        let localMovie = LocalMovie(context: self.dataController.viewContext)
                                        localMovie.id = String(describing: movie.id!)
                                        localMovie.movieTitle = movie.title
                                        localMovie.backdrop = movie.backdropPath
                                        localMovie.posterPath = movie.posterPath
                                        localMovie.movieRate = movie.movieRate!
                                        localMovies.append(localMovie)
                                        try? self.dataController.viewContext.save()
                                    }
                                    results.showMoviesList(moviesList: localMovies)
                                    
                                }
                            }
                            
                        } else if statusCode == 401 || statusCode==404 {
                            // an error occured
                            // handle error
                            results.showError()
                            return
                        }
                    }}
            }
            else {
                results.showMoviesList(moviesList: movieResults)
            }
            
        }
    }
}
